// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/post_repo/postrepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "exp/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepositoryI is a mock of PostRepositoryI interface.
type MockPostRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryIMockRecorder
}

// MockPostRepositoryIMockRecorder is the mock recorder for MockPostRepositoryI.
type MockPostRepositoryIMockRecorder struct {
	mock *MockPostRepositoryI
}

// NewMockPostRepositoryI creates a new mock instance.
func NewMockPostRepositoryI(ctrl *gomock.Controller) *MockPostRepositoryI {
	mock := &MockPostRepositoryI{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepositoryI) EXPECT() *MockPostRepositoryIMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostRepositoryI) CreatePost(newPost *domain.Post) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", newPost)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostRepositoryIMockRecorder) CreatePost(newPost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostRepositoryI)(nil).CreatePost), newPost)
}

// DeletePost mocks base method.
func (m *MockPostRepositoryI) DeletePost(idPost int) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", idPost)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepositoryIMockRecorder) DeletePost(idPost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepositoryI)(nil).DeletePost), idPost)
}

// FindPostById mocks base method.
func (m *MockPostRepositoryI) FindPostById(idPost int) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPostById", idPost)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPostById indicates an expected call of FindPostById.
func (mr *MockPostRepositoryIMockRecorder) FindPostById(idPost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPostById", reflect.TypeOf((*MockPostRepositoryI)(nil).FindPostById), idPost)
}

// UpdatePost mocks base method.
func (m *MockPostRepositoryI) UpdatePost(idPost int, updatePost domain.Post) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", idPost, updatePost)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostRepositoryIMockRecorder) UpdatePost(idPost, updatePost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostRepositoryI)(nil).UpdatePost), idPost, updatePost)
}
