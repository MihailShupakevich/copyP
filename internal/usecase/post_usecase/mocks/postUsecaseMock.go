// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/post_usecase/usecasepost.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "exp/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecasePost is a mock of UsecasePost interface.
type MockUsecasePost struct {
	ctrl     *gomock.Controller
	recorder *MockUsecasePostMockRecorder
}

// MockUsecasePostMockRecorder is the mock recorder for MockUsecasePost.
type MockUsecasePostMockRecorder struct {
	mock *MockUsecasePost
}

// NewMockUsecasePost creates a new mock instance.
func NewMockUsecasePost(ctrl *gomock.Controller) *MockUsecasePost {
	mock := &MockUsecasePost{ctrl: ctrl}
	mock.recorder = &MockUsecasePostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecasePost) EXPECT() *MockUsecasePostMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockUsecasePost) CreatePost(newPost *domain.Post) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", newPost)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockUsecasePostMockRecorder) CreatePost(newPost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockUsecasePost)(nil).CreatePost), newPost)
}

// DeletePost mocks base method.
func (m *MockUsecasePost) DeletePost(idPost int) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", idPost)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockUsecasePostMockRecorder) DeletePost(idPost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockUsecasePost)(nil).DeletePost), idPost)
}

// FindPostById mocks base method.
func (m *MockUsecasePost) FindPostById(idPost int) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPostById", idPost)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPostById indicates an expected call of FindPostById.
func (mr *MockUsecasePostMockRecorder) FindPostById(idPost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPostById", reflect.TypeOf((*MockUsecasePost)(nil).FindPostById), idPost)
}

// UpdatePost mocks base method.
func (m *MockUsecasePost) UpdatePost(idPost int, newPost domain.Post) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", idPost, newPost)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockUsecasePostMockRecorder) UpdatePost(idPost, newPost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockUsecasePost)(nil).UpdatePost), idPost, newPost)
}
