// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler/user_handler/userhandler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// CreateUsers mocks base method.
func (m *MockHandler) CreateUsers(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUsers", c)

}

// CreateUsers indicates an expected call of CreateUsers.
func (mr *MockHandlerMockRecorder) CreateUsers(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsers", reflect.TypeOf((*MockHandler)(nil).CreateUsers), c)
}



// DeleteUser mocks base method.
func (m *MockHandler) DeleteUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUser", c)
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockHandlerMockRecorder) DeleteUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockHandler)(nil).DeleteUser), c)
}

// FindUser mocks base method.
func (m *MockHandler) FindUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindUser", c)
}

// FindUser indicates an expected call of FindUser.
func (mr *MockHandlerMockRecorder) FindUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockHandler)(nil).FindUser), c)
}

// FindUsers mocks base method.
func (m *MockHandler) FindUsers(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindUsers", c)
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockHandlerMockRecorder) FindUsers(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockHandler)(nil).FindUsers), c)
}

// Login mocks base method.
func (m *MockHandler) Login(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", c)
}

// Login indicates an expected call of Login.
func (mr *MockHandlerMockRecorder) Login(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockHandler)(nil).Login), c)
}

// Registration mocks base method.
func (m *MockHandler) Registration(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Registration", c)
}

// Registration indicates an expected call of Registration.
func (mr *MockHandlerMockRecorder) Registration(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockHandler)(nil).Registration), c)
}

// UpdateUser mocks base method.
func (m *MockHandler) UpdateUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUser", c)
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockHandlerMockRecorder) UpdateUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockHandler)(nil).UpdateUser), c)
}
